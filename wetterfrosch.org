# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2024-02-09 22:12:52 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Wetterfrosch
  Wetterfrosch is a small GUI application to fetch warnings from the public
  German Weather Service (Deutscher Wetterdienst, [[https://www.dwd.de/][DWD]]) and display them.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 255 :emphasize t
   #+CAPTION: Clock summary at [2024-02-09 Fr 22:12]
   | Headline                            | Time      |            |          |       |      |
   |-------------------------------------+-----------+------------+----------+-------+------|
   | *Total time*                        | *4d 2:13* |            |          |       |      |
   |-------------------------------------+-----------+------------+----------+-------+------|
   | *Wetterfrosch*                      | *4d 2:13* |            |          |       |      |
   | \_  /Features [1/1]/                |           | /1d 12:35/ |          |       |      |
   | \_    More data [0/0]               |           |            | 1d 12:35 |       |      |
   | \_  /Components [11/14]/            |           | /2d 9:17/  |          |       |      |
   | \_    Configuration [0/0]           |           |            |     2:00 |       |      |
   | \_    Database [1/1]                |           |            |    18:14 |       |      |
   | \_      Replace queue with database |           |            |          |  5:11 |      |
   | \_    Load warnings from DWD [4/5]  |           |            |    14:19 |       |      |
   | \_      Avoid duplicates            |           |            |          |  9:35 |      |
   | \_      Use requests library        |           |            |          |  0:23 |      |
   | \_      Location                    |           |            |          |  1:33 |      |
   | \_      Testing                     |           |            |          |  0:41 |      |
   | \_    GUI [4/5]                     |           |            |    22:44 |       |      |
   | \_      Location management [1/1]   |           |            |          | 13:29 |      |
   | \_        Separate window class     |           |            |          |       | 0:01 |
   | \_      Non-blocking refresh        |           |            |          |  3:26 |      |
   | \_      Tray Icon                   |           |            |          |  1:14 |      |
   | \_  /Bugs [1/1]/                    |           | /4:21/     |          |       |      |
   | \_    Crash nach Dialog             |           |            |     4:21 |       |      |
   #+END:
** Features [1/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** DONE More data [0/0]
    CLOSED: [2024-02-07 Mi 19:04]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-02-07 Mi 15:39]--[2024-02-07 Mi 16:33] =>  0:54
    CLOCK: [2024-02-07 Mi 13:22]--[2024-02-07 Mi 13:46] =>  0:24
    CLOCK: [2024-02-06 Di 18:36]--[2024-02-06 Di 22:37] =>  4:01
    CLOCK: [2024-02-06 Di 14:46]--[2024-02-06 Di 15:23] =>  0:37
    CLOCK: [2024-02-05 Mo 17:50]--[2024-02-05 Mo 22:40] =>  4:50
    CLOCK: [2024-02-04 So 21:15]--[2024-02-04 So 22:35] =>  1:20
    CLOCK: [2024-02-03 Sa 20:30]--[2024-02-03 Sa 20:42] =>  0:12
    CLOCK: [2024-01-22 Mo 17:32]--[2024-01-23 Di 17:49] => 24:17
    :END:
    DWD has a public API that allows one to query a lot more than just
    warnings. I'd like to look into that and see what I might be able to do
    with that.

    [2024-01-23 Di 17:46]
    After looking into the offering at https://opendata.dwd.de/ and
    https://dwd.api.bund.dev/ for about 2 hours, I've decided that *if* there
    is something interesting in there, it's currently too much trouble to find
    it.

    [2024-02-01 Do 18:33]
    I found an open weather API called [[https://pirate-weather.apiable.io/][Pirate Weather]] and registered for a
    free API key that allows me to make 10,000 requests per month (~320 per
    day, about one every five minutes). I have not looked into their API yet,
    my API key is *bqiCjEJd20p0mCOJhCDC6Cs1AoCHOhzg*.
** Components [11/14]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
*** IMPLEMENT Configuration [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-01-21 So 22:09]--[2024-01-21 So 22:13] =>  0:04
    CLOCK: [2024-01-21 So 19:40]--[2024-01-21 So 20:49] =>  1:09
    CLOCK: [2024-01-21 So 16:49]--[2024-01-21 So 17:36] =>  0:47
    :END:
    The application currently ([2024-01-20 Sa]) uses a lot of hardwired values
    that I would like to make configurable.
    I think I want to use a good old ini-file, Python used to have good
    support for reading (and writing?) those.
*** DONE Database [1/1]
    CLOSED: [2024-02-01 Do 18:37]
    :LOGBOOK:
    CLOCK: [2024-01-18 Do 19:18]--[2024-01-18 Do 20:12] =>  0:54
    CLOCK: [2024-01-18 Do 15:40]--[2024-01-18 Do 17:30] =>  1:50
    CLOCK: [2024-01-17 Mi 17:28]--[2024-01-17 Mi 18:10] =>  0:42
    CLOCK: [2024-01-17 Mi 10:12]--[2024-01-17 Mi 11:44] =>  1:32
    CLOCK: [2024-01-15 Mo 17:42]--[2024-01-15 Mo 20:36] =>  2:54
    CLOCK: [2024-01-15 Mo 15:53]--[2024-01-15 Mo 16:55] =>  1:02
    CLOCK: [2024-01-13 Sa 17:50]--[2024-01-13 Sa 21:59] =>  4:09
    :END:
    Do I want a database of some kind? I am not sure what the value would be,
    the main point of the application is to display current warnings.
    ...
    Turns out, to everyone's complete surprise - yes, I do. Same procedure as
    every year.
**** DONE Replace queue with database
     CLOSED: [2024-02-03 Sa 19:51]
     :LOGBOOK:
     CLOCK: [2024-02-03 Sa 18:02]--[2024-02-03 Sa 19:51] =>  1:49
     CLOCK: [2024-02-01 Do 18:39]--[2024-02-01 Do 22:01] =>  3:22
     :END:
     I think I should replace the queue I use to transfer warnings from the
     client to the GUI with the database itself. The client simply stores its
     data there, the GUI queries the database for current warnings. Much
     cleaner and less error-prone.
*** DONE Load warnings from DWD [4/5]
    CLOSED: [2024-01-10 Mi 18:53]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-12-30 Sa 16:27]--[2023-12-30 Sa 18:34] =>  2:07
    :END:
**** TODO Avoid duplicates
     :LOGBOOK:
     CLOCK: [2024-02-09 Fr 17:36]--[2024-02-09 Fr 22:12] =>  4:36
     CLOCK: [2024-02-08 Do 19:22]--[2024-02-08 Do 20:48] =>  1:26
     CLOCK: [2024-02-08 Do 16:45]--[2024-02-08 Do 18:09] =>  1:24
     CLOCK: [2024-02-07 Mi 19:06]--[2024-02-07 Mi 21:15] =>  2:09
     :END:
**** DONE Cache data
     CLOSED: [2024-02-07 Mi 19:05]
     I would like to cache the data I fetch, so if fetch() is called again
     before the the next fetch is due, I can return the most recent data.
     I would also like to persistently save that data and the time I last
     fetched it, so on restart the Client doesn't bother the server again
     unnecessarily.
**** DONE Use requests library
     CLOSED: [2024-01-19 Fr 00:16]
     :LOGBOOK:
     CLOCK: [2024-01-18 Do 23:53]--[2024-01-19 Fr 00:16] =>  0:23
     :END:
     I use the requests library to look up our location in the UI, and it has
     a very nice and simple interface. I should use that in the client, too,
     for fetching warnings from DWD. 
**** DONE Location
     CLOSED: [2024-01-09 Di 19:59]
     :LOGBOOK:
     CLOCK: [2024-01-09 Di 18:26]--[2024-01-09 Di 19:59] =>  1:33
     :END:
     I currently use a hardwired list of regular expressions to filter which
     warnings are relevant to me (okay, it's *one* regular expression). I
     would like to make that configurable at runtime.
     Ideally, it would be nice if I could detect the current location
     automatically. ...
     That appears to be possible, but the API is a bit ... unfamiliar, I
     suppose. Let's see how that works.
     ... No, at my first test, I am getting rather nonsensical results, and
     it's only coordinates anyway, I would still need to convert that to a
     location name. :-|
     I'll try a library named geopy. Either I can feed it the coordinates I
     get from geoclue, or maybe I can even do the entire process via geopy.
     ...
     Okay, getting the location name from geopy works nicely, but the
     coordinates geoclue gives me are bogus - it thinks I'm in Israel. Not
     helpful.
     [2024-01-09 Di 19:56]
     In the end, the solution was almost painfully simple. ipinfo.io offers a
     web service that tells you not only your public IP address (I thinking of
     using geoIP to convert that to a location), but kindly includes the
     location name. I like this solution because it doesn't require anything
     outside of Python's standard library.
     ... Oh wait, requests is not from the standard library.
     But still. It's a very simple solution, which I like.
**** DONE Testing
     CLOSED: [2024-01-02 Di 19:19]
     :LOGBOOK:
     CLOCK: [2024-01-02 Di 18:43]--[2024-01-02 Di 19:19] =>  0:36
     CLOCK: [2024-01-02 Di 18:23]--[2024-01-02 Di 18:28] =>  0:05
     :END:
*** GUI [4/5]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2024-01-19 Fr 23:52]--[2024-01-19 Fr 23:58] =>  0:06
   CLOCK: [2024-01-06 Sa 19:24]--[2024-01-06 Sa 20:25] =>  1:01
   CLOCK: [2024-01-05 Fr 19:50]--[2024-01-05 Fr 20:39] =>  0:49
   CLOCK: [2024-01-05 Fr 18:00]--[2024-01-05 Fr 18:35] =>  0:35
   CLOCK: [2024-01-03 Mi 17:21]--[2024-01-03 Mi 19:15] =>  1:54
   CLOCK: [2024-01-02 Di 19:41]--[2024-01-02 Di 19:51] =>  0:10
   :END:
**** TODO Fetch interval
     I would like to edit the Client's fetch interval and make changes to it
     persistent. And now that I think about it, I should really think about
     configuration more generally.
**** DONE Location management [1/1]
     CLOSED: [2024-01-20 Sa 19:42]
     :LOGBOOK:
     CLOCK: [2024-01-31 Mi 18:28]--[2024-01-31 Mi 19:10] =>  0:42
     CLOCK: [2024-01-20 Sa 18:41]--[2024-01-20 Sa 19:42] =>  1:01
     CLOCK: [2024-01-19 Fr 21:46]--[2024-01-19 Fr 22:38] =>  0:52
     CLOCK: [2024-01-19 Fr 16:26]--[2024-01-19 Fr 20:19] =>  3:53
     CLOCK: [2024-01-19 Fr 16:06]--[2024-01-19 Fr 16:09] =>  0:03
     CLOCK: [2024-01-11 Do 16:40]--[2024-01-11 Do 17:47] =>  1:07
     CLOCK: [2024-01-10 Mi 19:05]--[2024-01-11 Do 00:55] =>  5:50
     :END:
     I can look up the location online now, but I would still like to be able
     to define custom regexes to match multiple locations. I'd also like for
     that list to be persistent.
     And of course the client should pick up changes to the list at runtime.

     [2024-01-20 Sa 19:43]
     It works, in a rather awkward way. I should eventually refactor the
     handling of locations, but for now we're good.
***** CANCELLED Separate window class
      CLOSED: [2024-01-20 Sa 19:43]
      :LOGBOOK:
      CLOCK: [2024-01-20 Sa 18:18]--[2024-01-20 Sa 18:19] =>  0:01
      :END:
      I decided I am going to write a separate class for the window to edit
      the location list, instead of using a Dialog. Although I might subclass
      gtk.Dialog
**** DONE Non-blocking refresh
     CLOSED: [2024-01-09 Di 18:11]
     :LOGBOOK:
     CLOCK: [2024-01-08 Mo 20:45]--[2024-01-09 Di 00:11] =>  3:26
     :END:
     Querying the DWD servers currently blocks the GUI, I want to not block
     the GUI. I can either use threads, or I could look into this async/await
     thing Python has going on. I've had that on my radar for quite a while,
     because Javascript has it, too, and it seems to be the hot shit these
     days, but I have not really done anything with it. This might be a good
     time to do so.
**** DONE Tray Icon
     CLOSED: [2024-01-08 Mo 20:19]
     :LOGBOOK:
     CLOCK: [2024-01-08 Mo 18:32]--[2024-01-08 Mo 19:43] =>  1:11
     CLOCK: [2024-01-06 Sa 20:27]--[2024-01-06 Sa 20:30] =>  0:03
     :END:
     It would appear [[https://lazka.github.io/pgi-docs/Gtk-3.0/classes/StatusIcon.html][gtk.StatusIcon]] is what I am looking for.
     ...
     Wait, no, that has been deprecated. The documentation says I should use
     [[https://lazka.github.io/pgi-docs/Gtk-3.0/classes/Application.html#Gtk.Application][gtk.Application]] instead, or [[https://lazka.github.io/pgi-docs/Gio-2.0/classes/Notification.html#Gio.Notification][gio.Notification]].
     ...
     Wait, no. The documentation for gtk.Application does not give me any
     hints as to how to display a systray icon.
     It has a mechanism for displaying notifications, but ... not for tray icons.
*** Notifications [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    Displaying notifications is easy enough.
**** SUSPENDED Make some noise
     CLOSED: [2024-01-20 Sa 19:46]
     It would be nice if I could get some sound to be played. At least
     optionally.
** Refactor [0/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   I should reorganize things to make the separation of labor between the UI
   and the client clearer. Especially how we deal with the list of locations.
*** TODO Location management
    Editing the location list and propagating changes to the Client is a bit
    clumsy right now, I'm sure I can do better than this.
** Bugs [1/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** FAILED [#A] Crash nach Dialog
    CLOSED: [2024-01-31 Mi 21:30]
    :LOGBOOK:
    CLOCK: [2024-02-01 Do 18:15]--[2024-02-01 Do 18:31] =>  0:16
    CLOCK: [2024-01-31 Mi 18:30]--[2024-01-31 Mi 21:30] =>  3:00
    CLOCK: [2024-01-30 Di 20:59]--[2024-01-30 Di 21:24] =>  0:25
    CLOCK: [2024-01-30 Di 15:41]--[2024-01-30 Di 15:47] =>  0:06
    CLOCK: [2024-01-30 Di 15:05]--[2024-01-30 Di 15:39] =>  0:34
    :END:
    I suspect my display_msg method causes a segfault somewhere in the Gtk
    code.
    [2024-01-31 Mi 21:30]
    After testing on several different systems, I think I've run into a bug in
    Gtk3.


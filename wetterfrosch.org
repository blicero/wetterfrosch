# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2024-01-09 00:11:22 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Wetterfrosch
  Wetterfrosch is a small GUI application to fetch warnings from the public
  German Weather Service (Deutscher Wetterdienst, [[https://www.dwd.de/][DWD]]) and display them.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 255 :emphasize t
   #+CAPTION: Clock summary at [2024-01-09 Di 00:11]
   | Headline                           | Time    |         |      |      |
   |------------------------------------+---------+---------+------+------|
   | *Total time*                       | *11:57* |         |      |      |
   |------------------------------------+---------+---------+------+------|
   | *Wetterfrosch*                     | *11:57* |         |      |      |
   | \_  /Components [0/4]/             |         | /11:57/ |      |      |
   | \_    Load warnings from DWD [1/1] |         |         | 2:48 |      |
   | \_      Testing                    |         |         |      | 0:41 |
   | \_    GUI [1/2]                    |         |         | 9:09 |      |
   | \_      Non-blocking refresh       |         |         |      | 3:26 |
   | \_      Tray Icon                  |         |         |      | 1:14 |
   #+END:
** Features
** Components [0/4]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
*** TODO Load warnings from DWD [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-12-30 Sa 16:27]--[2023-12-30 Sa 18:34] =>  2:07
    :END:
**** DONE Testing
     CLOSED: [2024-01-02 Di 19:19]
     :LOGBOOK:
     CLOCK: [2024-01-02 Di 18:43]--[2024-01-02 Di 19:19] =>  0:36
     CLOCK: [2024-01-02 Di 18:23]--[2024-01-02 Di 18:28] =>  0:05
     :END:
*** GUI [1/2]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2024-01-06 Sa 19:24]--[2024-01-06 Sa 20:25] =>  1:01
   CLOCK: [2024-01-05 Fr 19:50]--[2024-01-05 Fr 20:39] =>  0:49
   CLOCK: [2024-01-05 Fr 18:00]--[2024-01-05 Fr 18:35] =>  0:35
   CLOCK: [2024-01-03 Mi 17:21]--[2024-01-03 Mi 19:15] =>  1:54
   CLOCK: [2024-01-02 Di 19:41]--[2024-01-02 Di 19:51] =>  0:10
   :END:
**** TODO Non-blocking refresh
     :LOGBOOK:
     CLOCK: [2024-01-08 Mo 20:45]--[2024-01-09 Di 00:11] =>  3:26
     :END:
     Querying the DWD servers currently blocks the GUI, I want to not block
     the GUI. I can either use threads, or I could look into this async/await
     thing Python has going on. I've had that on my radar for quite a while,
     because Javascript has it, too, and it seems to be the hot shit these
     days, but I have not really done anything with it. This might be a good
     time to do so.
**** DONE Tray Icon
     CLOSED: [2024-01-08 Mo 20:19]
     :LOGBOOK:
     CLOCK: [2024-01-08 Mo 18:32]--[2024-01-08 Mo 19:43] =>  1:11
     CLOCK: [2024-01-06 Sa 20:27]--[2024-01-06 Sa 20:30] =>  0:03
     :END:
     It would appear [[https://lazka.github.io/pgi-docs/Gtk-3.0/classes/StatusIcon.html][gtk.StatusIcon]] is what I am looking for.
     ...
     Wait, no, that has been deprecated. The documentation says I should use
     [[https://lazka.github.io/pgi-docs/Gtk-3.0/classes/Application.html#Gtk.Application][gtk.Application]] instead, or [[https://lazka.github.io/pgi-docs/Gio-2.0/classes/Notification.html#Gio.Notification][gio.Notification]].
     ...
     Wait, no. The documentation for gtk.Application does not give me any
     hints as to how to display a systray icon.
     It has a mechanism for displaying notifications, but ... not for tray icons.
*** Notifications [0/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   Displaying notifications is easy enough.
**** TODO Make some noise
     It would be nice if I could get some sound to be played. At least
     optionally.
** Bugs


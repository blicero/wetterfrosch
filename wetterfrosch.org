# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2024-01-11 17:47:14 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Wetterfrosch
  Wetterfrosch is a small GUI application to fetch warnings from the public
  German Weather Service (Deutscher Wetterdienst, [[https://www.dwd.de/][DWD]]) and display them.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 255 :emphasize t
   #+CAPTION: Clock summary at [2024-01-11 Do 17:47]
   | Headline                           | Time    |         |       |      |
   |------------------------------------+---------+---------+-------+------|
   | *Total time*                       | *20:27* |         |       |      |
   |------------------------------------+---------+---------+-------+------|
   | *Wetterfrosch*                     | *20:27* |         |       |      |
   | \_  /Components [5/8]/             |         | /20:27/ |       |      |
   | \_    Load warnings from DWD [2/3] |         |         |  4:21 |      |
   | \_      Location                   |         |         |       | 1:33 |
   | \_      Testing                    |         |         |       | 0:41 |
   | \_    GUI [2/3]                    |         |         | 16:06 |      |
   | \_      Location management        |         |         |       | 6:57 |
   | \_      Non-blocking refresh       |         |         |       | 3:26 |
   | \_      Tray Icon                  |         |         |       | 1:14 |
   #+END:
** Features
** Components [5/8]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
*** MEDITATE Database?
    Do I want a database of some kind? I am not sure what the value would be,
    the main point of the application is to display current warnings.
*** DONE Load warnings from DWD [2/3]
    CLOSED: [2024-01-10 Mi 18:53]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-12-30 Sa 16:27]--[2023-12-30 Sa 18:34] =>  2:07
    :END:
**** TODO Use requests library
     I use the requests library to look up our location in the UI, and it has
     a very nice and simple interface. I should use that in the client, too,
     for fetching warnings from DWD. 
**** DONE Location
     CLOSED: [2024-01-09 Di 19:59]
     :LOGBOOK:
     CLOCK: [2024-01-09 Di 18:26]--[2024-01-09 Di 19:59] =>  1:33
     :END:
     I currently use a hardwire list of regular expressions to filter which
     warnings are relevant to me (okay, it's *one* regular expression). I
     would like to make that configurable at runtime.
     Ideally, it would be nice if I could detect the current location
     automatically. ...
     That appears to be possible, but the API is a bit ... unfamiliar, I
     suppose. Let's see how that works.
     ... No, at my first test, I am getting rather nonsensical results, and
     it's only coordinates anyway, I would still need to convert that to a
     location name. :-|
     I'll try a library named geopy. Either I can feed it the coordinates I
     get from geoclue, or maybe I can even do the entire process via geopy.
     ...
     Okay, getting the location name from geopy works nicely, but the
     coordinates geoclue gives me are bogus - it thinks I'm in Israel. Not
     helpful.
     [2024-01-09 Di 19:56]
     In the end, the solution was almost painfully simple. ipinfo.io offers a
     web service that tells you not only your public IP address (I thinking of
     using geoIP to convert that to a location), but kindly includes the
     location name. I like this solution because it doesn't require anything
     outside of Python's standard library.
     ... Oh wait, requests is not from the standard library.
     But still. It's a very simple solution, which I like.
**** DONE Testing
     CLOSED: [2024-01-02 Di 19:19]
     :LOGBOOK:
     CLOCK: [2024-01-02 Di 18:43]--[2024-01-02 Di 19:19] =>  0:36
     CLOCK: [2024-01-02 Di 18:23]--[2024-01-02 Di 18:28] =>  0:05
     :END:
*** GUI [2/3]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2024-01-06 Sa 19:24]--[2024-01-06 Sa 20:25] =>  1:01
   CLOCK: [2024-01-05 Fr 19:50]--[2024-01-05 Fr 20:39] =>  0:49
   CLOCK: [2024-01-05 Fr 18:00]--[2024-01-05 Fr 18:35] =>  0:35
   CLOCK: [2024-01-03 Mi 17:21]--[2024-01-03 Mi 19:15] =>  1:54
   CLOCK: [2024-01-02 Di 19:41]--[2024-01-02 Di 19:51] =>  0:10
   :END:
**** TODO Location management
     :LOGBOOK:
     CLOCK: [2024-01-11 Do 16:40]--[2024-01-11 Do 17:47] =>  1:07
     CLOCK: [2024-01-10 Mi 19:05]--[2024-01-11 Do 00:55] =>  5:50
     :END:
     I can look up the location online now, but I would still like to be able
     to define custom regexes to match multiple locations. I'd also like for
     that list to be persistent.
     And of course the client should pick up changes to the list at runtime.
**** SUSPENDED Non-blocking refresh
     CLOSED: [2024-01-09 Di 18:11]
     :LOGBOOK:
     CLOCK: [2024-01-08 Mo 20:45]--[2024-01-09 Di 00:11] =>  3:26
     :END:
     Querying the DWD servers currently blocks the GUI, I want to not block
     the GUI. I can either use threads, or I could look into this async/await
     thing Python has going on. I've had that on my radar for quite a while,
     because Javascript has it, too, and it seems to be the hot shit these
     days, but I have not really done anything with it. This might be a good
     time to do so.
**** DONE Tray Icon
     CLOSED: [2024-01-08 Mo 20:19]
     :LOGBOOK:
     CLOCK: [2024-01-08 Mo 18:32]--[2024-01-08 Mo 19:43] =>  1:11
     CLOCK: [2024-01-06 Sa 20:27]--[2024-01-06 Sa 20:30] =>  0:03
     :END:
     It would appear [[https://lazka.github.io/pgi-docs/Gtk-3.0/classes/StatusIcon.html][gtk.StatusIcon]] is what I am looking for.
     ...
     Wait, no, that has been deprecated. The documentation says I should use
     [[https://lazka.github.io/pgi-docs/Gtk-3.0/classes/Application.html#Gtk.Application][gtk.Application]] instead, or [[https://lazka.github.io/pgi-docs/Gio-2.0/classes/Notification.html#Gio.Notification][gio.Notification]].
     ...
     Wait, no. The documentation for gtk.Application does not give me any
     hints as to how to display a systray icon.
     It has a mechanism for displaying notifications, but ... not for tray icons.
*** Notifications [0/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   Displaying notifications is easy enough.
**** TODO Make some noise
     It would be nice if I could get some sound to be played. At least
     optionally.
*** Refactor [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    I should reorganize things to make the separation of labor between the UI
    and the client clearer. Especially how we deal with the list of locations.
** Bugs

